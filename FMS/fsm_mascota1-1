//VERSION REDUCCION DE VARIABLES Y MODIFICADOR DE VELOCIDAD 

module fsm_mascota (
    input clk,
    input reset,
    input A,  // Entrada para transición de estados
    input B,  // Entrada para modificar variable en el estado actual
    input C,  // Entrada para transición de estados en el sentido contrario
    input [1:0] color,
    input [1:0] time_control,  // Nueva entrada de 2 bits para modificar el contador de tiempo
    output reg [7:0] output1,
    output reg [3:0] output2
);

    parameter S0 = 0;
    parameter S1 = 1;
    parameter S2 = 2;
    parameter S3 = 3;
    parameter S4 = 4;
    parameter S5 = 5;  // Nuevo estado

    reg [2:0] current_state, next_state;
    reg [2:0] var_S0, var_S1, var_S2, var_S3, var_S4;

    // Temporizador y parámetros de decremento
    reg [31:0] timer = 0;
    reg [31:0] decrement_interval;
    parameter BASE_INTERVAL = 4'd15;  // Intervalo base para disminuir variables

    reg [3:0] decrement_amount_S0 = 4'd1;
    reg [3:0] decrement_amount_S1 = 4'd2;
    reg [3:0] decrement_amount_S2 = 4'd3;
    reg [3:0] decrement_amount_S3 = 4'd4;
    reg [3:0] decrement_amount_S4 = 4'd5;

    // Ajuste del intervalo de tiempo según time_control
    always @(*) begin
        case (time_control)
            2'b00: decrement_interval = BASE_INTERVAL;       // Tiempo base
            2'b01: decrement_interval = BASE_INTERVAL >> 1;  // Doble de rápido
            2'b10: decrement_interval = BASE_INTERVAL >> 2;  // Doble de lento
            2'b11: decrement_interval = BASE_INTERVAL >> 3;  // Cuatro veces más lento
        endcase
    end

    // Registro de estado
    always @(posedge clk or posedge reset) begin
        if (reset)
            current_state <= S0;
        else
            current_state <= next_state;
    end

    // Calcular el promedio de las variables
    wire [3:0] average;
    assign average = (var_S0 + var_S1 + var_S2 + var_S3 + var_S4) / 5;

    // Lógica combinacional para transiciones de estado
    always @(posedge clk) begin
        case (current_state)
            S0: next_state = (average < 1) ? S5 : (A ? S1 : (C ? S4 : S0));  // Transición a S5 si promedio < 1
            S1: next_state = (average < 1) ? S5 : (A ? S2 : (C ? S0 : S1));  // Transición a S5 si promedio < 1
            S2: next_state = (average < 1) ? S5 : (A ? S3 : (C ? S1 : S2));  // Transición a S5 si promedio < 1
            S3: next_state = (average < 1) ? S5 : (A ? S4 : (C ? S2 : S3));  // Transición a S5 si promedio < 1
            S4: next_state = (average < 1) ? S5 : (A ? S0 : (C ? S3 : S4));  // Transición a S5 si promedio < 1
            S5: next_state = reset ? S0 : S5;  // El estado S5 podría ser un estado final o de alarma
            default: next_state = S0;  // Valor por defecto en caso de un estado no definido
        endcase
    end

// Modificación de variables por estado
always @(posedge clk or posedge reset) begin
    if (reset) begin
        var_S0 <= 8'b0;
        var_S1 <= 8'b0;
        var_S2 <= 8'b0;
        var_S3 <= 8'b0;
        var_S4 <= 8'b0;
        timer <= 0;  // Reinicia el temporizador
    end else begin
        // Incrementar el temporizador en cada ciclo de reloj
        if (timer < decrement_interval)begin
            timer <= timer + 1;end
        else begin
            timer <= 0;  // Reinicia el temporizador cuando alcanza el intervalo
            // Reducir las variables cuando el temporizador alcanza el intervalo
                if (var_S0 > 0) begin
                    var_S0 <= var_S0 - decrement_amount_S0;end
                if (var_S1 > 0)begin 
                    var_S1 <= var_S1 - decrement_amount_S0;end
                if (var_S2 > 0)begin 
                    var_S2 <= var_S2 - decrement_amount_S0;end
                if (var_S3 > 0)begin 
                    var_S3 <= var_S3 - decrement_amount_S0;end
                if (var_S4 > 0)begin 
                    var_S4 <= var_S4 - decrement_amount_S0;end            
/*             case (current_state)
                S0: if (var_S0 > 0) var_S0 <= var_S0 - decrement_amount_S0;
                S1: if (var_S1 > 0) var_S1 <= var_S1 - decrement_amount_S1;
                S2: if (var_S2 > 0) var_S2 <= var_S2 - decrement_amount_S2;
                S3: if (var_S3 > 0) var_S3 <= var_S3 - decrement_amount_S3;
                S4: if (var_S4 > 0) var_S4 <= var_S4 - decrement_amount_S4;
            endcase */
        end

        // Modificación de variables con la entrada B
        if (B) begin
            case (current_state)
                S0: var_S0 <= var_S0 + 1;
                S1: var_S1 <= var_S1 + 1;
                S2: var_S2 <= var_S2 + 1;
                S3: var_S3 <= var_S3 + 1;
                S4: var_S4 <= var_S4 + 1;
            endcase
        end
    end
end

    // Lógica para las salidas
    always @(*) begin
        case (current_state)
            S0: begin
                output1 = var_S0;
                output2 = S0;
            end
            S1: begin
                output1 = var_S1;
                output2 = S1;
            end
            S2: begin
                output1 = var_S2;
                output2 = S2;
            end
            S3: begin
                output1 = var_S3;
                output2 = S3;
            end
            S4: begin
                output1 = var_S4;
                output2 = S4;
            end
            S5: begin
                output1 = 8'b0;  // Definir las salidas según lo que S5 deba hacer
                output2 = S5;
            end
        endcase
    end

endmodule




/* module fsm_mascota (
    input clk,
    input reset,
    input A,  // Entrada para transición de estados
    input B,  // Entrada para modificar variable en el estado actual
    input C,  // Entrada para transición de estados en el sentido contrario
    output reg [7:0] output1,
    output reg [3:0] output2
);

    parameter S0 = 0;
    parameter S1 = 1;
    parameter S2 = 2;
    parameter S3 = 3;
    parameter S4 = 4;
    parameter S5 = 5;  // Nuevo estado

    reg [2:0] current_state, next_state;
    reg [7:0] var_S0, var_S1, var_S2, var_S3, var_S4;

    // Temporizador y parámetros de decremento
    reg [31:0] timer;
    parameter decrement_interval = 1000000;  // Intervalo para disminuir variables
    reg [3:0] decrement_amount_S0 = 4'd1;
    reg [3:0] decrement_amount_S1 = 4'd2;
    reg [3:0] decrement_amount_S2 = 4'd1;
    reg [3:0] decrement_amount_S3 = 4'd3;
    reg [3:0] decrement_amount_S4 = 4'd2;

    // Registro de estado
    always @(posedge clk or posedge reset) begin
        if (reset)
            current_state <= S0;
        else
            current_state <= next_state;
    end

    // Calcular el promedio de las variables
    wire [3:0] average;
    assign average = (var_S0 + var_S1 + var_S2 + var_S3 + var_S4) / 5;

    // Lógica combinacional para transiciones de estado
    always @(posedge clk) begin
        case (current_state)
            S0: next_state = (average < 1) ? S5 : (A ? S1 : (C ? S4 : S0));  // Transición a S5 si promedio < 1
            S1: next_state = (average < 1) ? S5 : (A ? S2 : (C ? S0 : S1));  // Transición a S5 si promedio < 1
            S2: next_state = (average < 1) ? S5 : (A ? S3 : (C ? S1 : S2));  // Transición a S5 si promedio < 1
            S3: next_state = (average < 1) ? S5 : (A ? S4 : (C ? S2 : S3));  // Transición a S5 si promedio < 1
            S4: next_state = (average < 1) ? S5 : (A ? S0 : (C ? S3 : S4));  // Transición a S5 si promedio < 1
            S5: next_state = reset ? S0 : S5;  // El estado S5 podría ser un estado final o de alarma
            default: next_state = S0;  // Valor por defecto en caso de un estado no definido
        endcase
    end

    // Modificación de variables por estado
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            var_S0 <= 8'b0;
            var_S1 <= 8'b0;
            var_S2 <= 8'b0;
            var_S3 <= 8'b0;
            var_S4 <= 8'b0;
            timer <= 0;  // Reinicia el temporizador
        end
        else begin
            // Incrementar el temporizador
            timer <= timer + 1;

            // Reducir las variables cuando el temporizador alcanza el intervalo
            if (timer >= decrement_interval) begin
                timer <= 0;  // Reinicia el temporizador
                case (current_state)
                    S0: if (var_S0 > 0) var_S0 <= var_S0 - decrement_amount_S0;
                    S1: if (var_S1 > 0) var_S1 <= var_S1 - decrement_amount_S1;
                    S2: if (var_S2 > 0) var_S2 <= var_S2 - decrement_amount_S2;
                    S3: if (var_S3 > 0) var_S3 <= var_S3 - decrement_amount_S3;
                    S4: if (var_S4 > 0) var_S4 <= var_S4 - decrement_amount_S4;
                endcase
            end

            // Modificación de variables con la entrada B
            if (B) begin
                case (current_state)
                    S0: var_S0 <= var_S0 + 1;
                    S1: var_S1 <= var_S1 + 1;
                    S2: var_S2 <= var_S2 + 1;
                    S3: var_S3 <= var_S3 + 1;
                    S4: var_S4 <= var_S4 + 1;
                endcase
            end
        end
    end

    // Lógica para las salidas
    always @(*) begin
        case (current_state)
            S0: begin
                output1 = var_S0;
                output2 = S0;
            end
            S1: begin
                output1 = var_S1;
                output2 = S1;
            end
            S2: begin
                output1 = var_S2;
                output2 = S2;
            end
            S3: begin
                output1 = var_S3;
                output2 = S3;
            end
            S4: begin
                output1 = var_S4;
                output2 = S4;
            end
            S5: begin
                output1 = 8'b0;  // Podrías definir las salidas según lo que S5 deba hacer
                output2 = S5;
            end
        endcase
    end

endmodule
 */